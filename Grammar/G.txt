Source @ Declarations

Declarations @ Declarations Declaration
Declarations @ Declaration

Declaration @ VarDeclaration
Declaration @ FunDeclaration

Const @ const
VarDeclaration @ Type DeclaredVars ;
VarDeclaration @ Const Type DeclaredVars ;

DeclaredVars @ DeclaredVar , DeclaredVars
DeclaredVars @ DeclaredVar

DeclaredVar @ id
DeclaredVar @ id DecIndices
DeclaredVar @ id = Expr

VariableUse @ id
VariableUse @ id UseIndices

UseIndices @ [ Expr ] UseIndices
UseIndices @ [ Expr ]

DecIndices @ [ Expr ] DecIndices
DecIndices @ [ Expr ]

FunDeclaration @ Type IdLeftBrace HereIsParameter ) Compound
FunDeclaration @ Type IdLeftBrace ) Compound
IdLeftBrace @ id (

Type @ int
Type @ float
Type @ double
Type @ void
Type @ bool

HereIsParameter @ void
HereIsParameter @ Parameters

Parameters @ Parameter , Parameters
Parameters @ Parameter

Parameter @ Type id
Parameter @ Type id DecIndices



Statements @ Statement Statements
Statements @ Statement

Statement @ VarDeclaration
Statement @ Expression
Statement @ If
Statement @ While
Statement @ Return
Statement @ Compound
Statement @ ;

Expression @ Expr ;

If @ IfSymbol ( Expr RightBraceSetIfWhile Statement
If @ IfSymbol ( Expr RightBraceSetIfWhile Statement else Statement

RightBraceSetIfWhile @ )

IfSymbol @ if

While @ WhileSymbol ( Expr RightBraceSetIfWhile Statement
WhileSymbol @ while

Return @ return Expr ;
Return @ return ;

Compound @ { }
Compound @ LeftCurlyBraceFore Statements }
LeftCurlyBraceFore @ {



Expr @ Comma

Comma @ Comma , Assignment
Comma @ Assignment

Assignment @ LogicalOr = Assignment
Assignment @ LogicalOr

LogicalOr @ LogicalOr || LogicalAnd
LogicalOr @ LogicalAnd

LogicalAnd @ LogicalAnd && Comparison
LogicalAnd @ Comparison

Comparison @ Comparison CmpSymbol Addition
Comparison @ Addition

CmpSymbol @ ==
CmpSymbol @ >
CmpSymbol @ >=
CmpSymbol @ <
CmpSymbol @ <=
CmpSymbol @ !=

Addition @ Addition AddSymbol Multiplication
Addition @ Multiplication

AddSymbol @ +
AddSymbol @ -

Multiplication @ Multiplication MulSymbol Item
Multiplication @ Item

MulSymbol @ *
MulSymbol @ /

Item @ ! Item
Item @ - Item
Item @ ( Expr )
Item @ VariableUse
Item @ Call
Item @ Num

Call @ id ( HereIsArgument )
Call @ id ( )

HereIsArgument @ void
HereIsArgument @ Arguments

Arguments @ Argument , Arguments
Arguments @ Argument

Argument @ Expr

Num @ num
Num @ true
Num @ false
